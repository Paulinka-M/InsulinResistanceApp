@page "/rejestracja"
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Rejestracja Użytkownika</PageTitle>

<div class="top-bar">
    <div class="logo">
        <h1 @onclick="NavigateToHomePage">Insulin Resistance <span style="color:#f4c430">App</span></h1>
    </div>
    <div class="login-button">
        <button class="btn btn-primary" @onclick="NavigateToLogin">Zaloguj się</button>
    </div>
</div>

<div class="container">
    <div class="formularz">
        <h3 style ="color:#f4c430">Rejestracja</h3>
        <Microsoft.AspNetCore.Components.Forms.EditForm Model="uzytkownik" OnValidSubmit="RejestracjaHandler">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="mb-3">
                <label for="email">E-mail</label>
                <InputText id="email" @bind-Value="uzytkownik.Email" class="form-control" />
                <ValidationMessage For="@(() => uzytkownik.Email)" />
            </div>
            <div class="mb-3">
                <label for="haslo">Hasło</label>
                <InputText id="haslo" @bind-Value="uzytkownik.Haslo" class="form-control" type="password" />
                <ValidationMessage For="@(() => uzytkownik.Haslo)" />
            </div>
            <div class="mb-3">
                <label for="powtorzhaslo">Powtórz Hasło</label>
                <InputText id="powtorzhaslo" @bind-Value="uzytkownik.PotwierdzenieHaslo" class="form-control" type="password" />
                <ValidationMessage For="@(() => uzytkownik.PotwierdzenieHaslo)" />
            </div>

            <button type="submit" class="btn btn-secondary">Zarejestruj się</button>
            <div class="@messageCss">
                <span>@message</span>
            </div>

        </Microsoft.AspNetCore.Components.Forms.EditForm>
    <br />
    <NavLink href="/zapomnialem-hasla">Zapomniałem Hasła</NavLink>
</div>
    <div>
        <img class="media-img" src="Images/owocewarzywa.jpg" alt="Obrazek" width="400" height="650">
    </div>
</div>

<footer class="footer">
    <div class="social-icons">
        <a href="https://www.facebook.com/" target="_blank" rel="noopener noreferrer">
            <img src="images/facebook-icon.png" alt="Facebook" class="iconfb">
        </a>
        <a href="https://www.youtube.com/" target="_blank" rel="noopener noreferrer">
            <img src="images/youtube-icon.png" alt="YouTube" class="iconyt">
        </a>
        <a href="https://www.instagram.com/" target="_blank" rel="noopener noreferrer">
            <img src="images/instagram-icon.png" alt="Instagram" class="iconinsta">
        </a>
        <a href="https://www.gmail.com/" target="_blank" rel="noopener noreferrer">
            <img src="images/gmail-icon.png" alt="Gmail" class="icongmail">
        </a>
    </div>
</footer>
@code {
    RejestracjaUzytkownika uzytkownik = new InsulinResistanceApp.Shared.RejestracjaUzytkownika();

    string message = string.Empty;
    string messageCss = string.Empty;

    async Task RejestracjaHandler()
    {
        bool isSQL = checkForSqlStatements(uzytkownik.Email);
        if (isSQL == true)
        {
            message = "Twój email zawiera zapytanie SQL. Proszę użyj innego.";
            messageCss = "text-danger";
        }
        else
        {

            var result = await AuthService.Rejestracja(uzytkownik);
            message = result.Message;
            if (result.Success)
            {
                messageCss = "text-success";
            }
            else
            {
                messageCss = "text-danger";
            }
        }
    }
    private bool checkForSqlStatements(string toCheck)
    {
        string[] zakazane = new string[13] {"SELECT", "UNION", "DROP", "FROM",
                    "WHERE", "JOIN", "USE", "GROUP", "ORDER", "'",
                    "DELETE", "CREATE", "ALTER"};

        toCheck = toCheck.ToUpper();

        foreach (string zakazaneSlowo in zakazane)
        {

            if (toCheck.Contains(zakazaneSlowo))
            {
                Console.WriteLine("Znaleziono zakazane slowo: " + zakazaneSlowo);
                return true;
            }
        }
        return false;
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/logowanie");
    }

    private void NavigateToHomePage()
    {
        NavigationManager.NavigateTo("/");
    }
}
